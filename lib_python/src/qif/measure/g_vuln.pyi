"""
:math:`g`-vulnerability.
"""
from .. import typing as t

def G_id(n_rows: int, type: t.TypeLike = t.def_type) -> t.ndarray: ...

def add_capacity(pi: t.ndarray, C: t.ndarray, one_spanning_g: bool = False) -> t.FloatOrRat: ...

@t.overload
def add_leakage(G: t.ndarray, pi: t.ndarray, C: t.ndarray) -> t.FloatOrRat: ...
@t.overload
def add_leakage(g: t.Metric[int,t.FloatOrRat], pi: t.ndarray, C: t.ndarray) -> t.FloatOrRat: ...

def g_add(G1: t.ndarray, G2: t.ndarray) -> t.ndarray: ...

def g_from_posterior(G: t.ndarray, C: t.ndarray) -> t.ndarray: ...

def g_id(type: t.TypeLike = t.def_type) -> t.Metric[int,t.FloatOrRat]: ...

@t.overload
def g_to_bayes(G: t.ndarray, pi: t.ndarray) -> t.Tuple[t.ndarray, t.ndarray, t.FloatOrRat, t.FloatOrRat]: ...
@t.overload
def g_to_bayes(g: t.Metric[int,t.FloatOrRat], pi: t.ndarray) -> t.Tuple[t.ndarray, t.ndarray, t.FloatOrRat, t.FloatOrRat]: ...

@t.overload
def mult_leakage(G: t.ndarray, pi: t.ndarray, C: t.ndarray) -> t.FloatOrRat: ...
@t.overload
def mult_leakage(g: t.Metric[int,t.FloatOrRat], pi: t.ndarray, C: t.ndarray) -> t.FloatOrRat: ...

@t.overload
def posterior(G: t.ndarray, pi: t.ndarray, C: t.ndarray) -> t.FloatOrRat: ...
@t.overload
def posterior(g: t.Metric[int,t.FloatOrRat], pi: t.ndarray, C: t.ndarray) -> t.FloatOrRat: ...

@t.overload
def prior(G: t.ndarray, pi: t.ndarray) -> t.FloatOrRat: ...
@t.overload
def prior(G: t.Metric[int,t.FloatOrRat], pi: t.ndarray) -> t.FloatOrRat: ...

@t.overload
def strategy(G: t.ndarray, pi: t.ndarray, C: t.ndarray) -> t.ndarray: ...
@t.overload
def strategy(g: t.Metric[int,t.FloatOrRat], pi: t.ndarray, C: t.ndarray) -> t.ndarray: ...

