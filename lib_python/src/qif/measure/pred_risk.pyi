"""
Risk of guessing a predicate of the secret.
"""
from .. import typing as t

def L_pred(P: t.ndarray, type: t.TypeLike = t.def_type) -> t.ndarray: ...

def add_leakage(P: t.ndarray, pi: t.ndarray, C: t.ndarray) -> t.FloatOrRat: ...

def binary_channel(P: t.ndarray, pi: t.ndarray, C: t.ndarray) -> t.Tuple[t.ndarray, t.ndarray]: ...

def mult_capacity(P: t.ndarray, C: t.ndarray, method: str = 'direct') -> t.Tuple[t.FloatOrRat, t.ndarray]: ...

def mult_leakage(P: t.ndarray, pi: t.ndarray, C: t.ndarray) -> t.FloatOrRat: ...

def posterior(P: t.ndarray, pi: t.ndarray, C: t.ndarray) -> t.FloatOrRat: ...

def prior(P: t.ndarray, pi: t.ndarray) -> t.FloatOrRat: ...
